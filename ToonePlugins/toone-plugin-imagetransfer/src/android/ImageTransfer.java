package toone.v3.plugins.imagetransfer;import android.graphics.Bitmap;import android.util.Base64;import android.util.Log;import android.view.View;import com.nostra13.universalimageloader.cache.memory.impl.WeakMemoryCache;import com.nostra13.universalimageloader.core.ImageLoader;import com.nostra13.universalimageloader.core.ImageLoaderConfiguration;import com.nostra13.universalimageloader.core.assist.FailReason;import com.nostra13.universalimageloader.core.listener.ImageLoadingListener;import org.apache.cordova.CallbackContext;import org.apache.cordova.CordovaInterface;import org.apache.cordova.CordovaPlugin;import org.apache.cordova.CordovaWebView;import org.json.JSONArray;import org.json.JSONException;import java.io.ByteArrayOutputStream;import java.io.File;import java.io.IOException;import java.security.MessageDigest;import toone.util.fileutil.FileIOUtils;public class ImageTransfer extends CordovaPlugin {    private static final String TAG = "ImageTransfer";    @Override    public void initialize(CordovaInterface cordova, CordovaWebView webView) {        super.initialize(cordova, webView);        Log.i(TAG, "initialize");        //图片现在配置        ImageLoaderConfiguration configuration = new ImageLoaderConfiguration.Builder(cordova.getActivity())                .writeDebugLogs()                .threadPoolSize(10)                .memoryCache(new WeakMemoryCache())                .build();        ImageLoader.getInstance().init(configuration);    }    @Override    public boolean execute(String action, JSONArray args, final CallbackContext callbackContext) throws JSONException {        Log.i(TAG, "action = " + action + "\nargs = " + args);        final String url = args.getString(0);        final String cachePath = cordova.getActivity().getCacheDir() + "/v3Cache/";        if ("getImage".equalsIgnoreCase(action)) {            String md5FileName = getMD5FileName(url);            final File localFile = new File(cachePath + md5FileName + ".webp");            if (localFile.exists()) {                cordova.getThreadPool().execute(new Runnable() {                    @Override                    public void run() {                        Log.i(TAG, "走缓存 url = " + url);                        String base64 = FileIOUtils.readFile2String(localFile);                        callbackContext.success("data:image/png;base64," + base64);                    }                });            } else {                ImageLoader.getInstance().loadImage(url, new ImageLoadingListener() {                    @Override                    public void onLoadingStarted(String s, View view) {                        Log.i(TAG,"走网络 url = " + s);                    }                    @Override                    public void onLoadingFailed(String s, View view, FailReason failReason) {                        Log.e(TAG, "onLoadingFailed s = " + s + "\nfailReason = " + failReason.getCause() + "---" + failReason.getType());                        callbackContext.error("error");                    }                    @Override                    public void onLoadingComplete(String s, View view, Bitmap bitmap) {                        String base64 = bitmapToBase64(bitmap);                        callbackContext.success("data:image/png;base64," + base64);                        FileIOUtils.writeFileFromString(cachePath + getMD5FileName(s) + ".webp", base64);                    }                    @Override                    public void onLoadingCancelled(String s, View view) {                    }                });            }        }        return true;    }    /**     * bitmap转为base64     */    private String bitmapToBase64(Bitmap bitmap) {        String result = null;        ByteArrayOutputStream baos = null;        try {            if (bitmap != null) {                baos = new ByteArrayOutputStream();                bitmap.compress(Bitmap.CompressFormat.PNG, 100, baos);                try {                    baos.flush();                } catch (IOException e) {                    e.printStackTrace();                }                baos.close();                byte[] bitmapBytes = baos.toByteArray();                result = Base64.encodeToString(bitmapBytes, Base64.DEFAULT);            }        } catch (IOException e) {            e.printStackTrace();        } finally {            try {                if (baos != null) {                    baos.flush();                    baos.close();                }            } catch (IOException e) {                e.printStackTrace();            }        }        return result;    }    private String getMD5FileName(String url) {        MessageDigest md5;        try {            md5 = MessageDigest.getInstance("MD5");        } catch (Exception e) {            e.printStackTrace();            return "";        }        char[] charArray = url.toCharArray();        byte[] byteArray = new byte[charArray.length];        for (int i = 0; i < charArray.length; i++)            byteArray[i] = (byte) charArray[i];        byte[] md5Bytes = md5.digest(byteArray);        StringBuilder hexValue = new StringBuilder();        for (byte md5Byte : md5Bytes) {            int val = ((int) md5Byte) & 0xff;            if (val < 16)                hexValue.append("0");            hexValue.append(Integer.toHexString(val));        }        return hexValue.toString();    }}
/** * An Image Picker Plugin for Cordova/PhoneGap. */package toone.v3.plugins.imagepicker;import android.Manifest;import android.app.Activity;import android.content.Intent;import android.content.pm.PackageManager;import android.util.Log;import org.apache.cordova.CallbackContext;import org.apache.cordova.CordovaPlugin;import org.apache.cordova.PermissionHelper;import org.apache.cordova.PluginResult;import org.json.JSONArray;import org.json.JSONException;import org.json.JSONObject;import java.util.ArrayList;public class ImagePicker extends CordovaPlugin {    public static String TAG = "ImagePicker";    private  CallbackContext callbackContext;    private String action;    private JSONObject params;    private static final int IMAGEPICKER_PERMISSION_CODE = 1101;    private final static String[] permissions = {Manifest.permission.CAMERA, Manifest.permission.READ_EXTERNAL_STORAGE, Manifest.permission.WRITE_EXTERNAL_STORAGE};    public boolean execute(String action, final JSONArray args, final CallbackContext callbackContext) throws JSONException {        this.callbackContext = callbackContext;        this.params = args.getJSONObject(0);        this.action = action;        Log.i(TAG, "action = " + action + "\nargs = " + args);        if(hasPermisssion()){            getPicture();        }else{            PermissionHelper.requestPermissions(this, IMAGEPICKER_PERMISSION_CODE, permissions);        }        return true;    }    private void getPicture() throws JSONException {        if (action.equals("getPictures")) {            Intent intent = new Intent(cordova.getActivity(), MultiImageChooserActivity.class);            int max = 20;            int desiredWidth = 0;            int desiredHeight = 0;            int quality = 100;            if (params.has("maximumImagesCount")) {                max = params.getInt("maximumImagesCount");            }            if (params.has("width")) {                desiredWidth = params.getInt("width");            }            if (params.has("height")) {                desiredHeight = params.getInt("height");            }            if (params.has("quality")) {                quality = params.getInt("quality");            }            intent.putExtra("MAX_IMAGES", max);            intent.putExtra("WIDTH", desiredWidth);            intent.putExtra("HEIGHT", desiredHeight);            intent.putExtra("QUALITY", quality);            if (this.cordova != null) {                this.cordova.startActivityForResult(this, intent, 0);            }        }    }    public boolean hasPermisssion() {        for (String p : permissions) {            if (!PermissionHelper.hasPermission(this, p)) {                return false;            }        }        return true;    }    public void requestPermissions(int requestCode) {        PermissionHelper.requestPermissions(this, requestCode, permissions);    }    public void onRequestPermissionResult(int requestCode, String[] permissions, int[] grantResults) throws JSONException {        PluginResult result;        //This is important if we're using Cordova without using Cordova, but we have the geolocation plugin installed        if (callbackContext != null) {            for (int r : grantResults) {                if (r == PackageManager.PERMISSION_DENIED) {                    Log.i(TAG, "权限申请被拒绝!");                    result = new PluginResult(PluginResult.Status.ILLEGAL_ACCESS_EXCEPTION);                    callbackContext.sendPluginResult(result);                    return;                }            }            getPicture();            result = new PluginResult(PluginResult.Status.OK);            callbackContext.sendPluginResult(result);        }    }    @Override    public void onActivityResult(int requestCode, int resultCode, Intent data) {        super.onActivityResult(requestCode, resultCode, data);        Log.i(TAG, "requestCode = " + requestCode + "---resultCode = " + resultCode);        if (resultCode == Activity.RESULT_OK && data != null) {            ArrayList<String> fileNames = data.getStringArrayListExtra("MULTIPLEFILENAMES");            JSONArray res = new JSONArray(fileNames);            callbackContext.success(res);        } else if (resultCode == Activity.RESULT_CANCELED && data != null) {            String error = data.getStringExtra("ERRORMESSAGE");            callbackContext.error(error);        } else if (resultCode == Activity.RESULT_CANCELED) {            JSONArray res = new JSONArray();            callbackContext.success(res);        }else {            callbackContext.error("No images selected");        }    }}